# it will be set build date by gradle. if this value is @build.date@, front-end is development mode

build:
  date: '@build.date@'

# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
# Enable http encoding support.
# Force the encoding to the configured charset on HTTP requests and responses.
server:
  address: 0.0.0.0
  port: '8080'
  servlet:
    contextPath: /
    encoding:
      force: 'true'
      charset: UTF-8
      enabled: 'true'
  #gzip compression
  compression:
    enabled: 'true'
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css



# 변수
naver:
  serviceid: ncp:sms:kr:279856955477:integproject
  accesskey: HIDncMGBKqu5AUI6sjxz
  secretkey: fouu4u2cBxZZB1SEIKeRAzReGnswE6KflPkn6pry

app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - https://ssafit.site/api_be/oauth/redirect
  wfileupload:
    uploadDir: upload
    uploadPath: C:\\Users\\dlrjs\\Desktop\\sixman\\backend-java\\src\\main\\resources\\static

  lfileupload:
    uploadDir: upload
    uploadPath: /home

spa:
  default-file: /dist/index.html


# Swagger
springfox:
  documentation:
    swagger:
      use-model-v3: 'false'

#
#cloud:
#  aws:
#    s3:
#      bucket: ssafit-01
#    region:
#      static: ap-northeast-2
#    stack:
#      auto: false
#    credentials:
#      accessKey: AKIAZM2UBXT2Y6AEKMKF
#      secretKey: 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
#      instanceProfile: true

spring:
  kafka:
    producer:
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      auto-offset-reset: latest
      max-poll-records: '1000'
      group-id: kafka-demo
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      enable-auto-commit: 'true'
    template:
      default-topic: kafka-demo
    bootstrap-servers: 52.79.114.28:9092
#  profiles:
#    include:
#      -aws
#      -credentials
  security:
    oauth2.client:
      registration:
        google:
          clientId: '1090279015530-7h88g8sugkhar11j8enjo87d351i7g4v.apps.googleusercontent.com'
          clientSecret: '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'
          redirectUri: "https://ssafit.site/api_be/login/oauth2/code/google"
          scope:
            - email
            - profile
        facebook:
          clientId: '{페이스북 client-id}'
          clientSecret: '{페이스북 client-secret}'
          scope:
            - email
            - public_profile
        naver:
          clientId: '{네이버 client-id}'
          clientSecret: '{네이버 client-secret}'
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope:
            - nickname
            - email
            - profile_image
          clientName: Naver
        kakao:
          clientId: 'e9571f1f9b199c076d78f95fd1899db2'
          clientSecret: '2Gkh9SWv9Aey1rpcNWalc0gbeRwUjvQh'
          clientAuthenticationMethod: post
          authorizationGrantType: authorization_code
          redirectUri: "https://ssafit.site/api_be/login/oauth2/code/kakao"
          scope:
            - profile_nickname
            - profile_image
            - account_email
          clientName: Kakao
      # Provider 설정
      provider:
        naver:
          authorizationUri: https://nid.naver.com/oauth2.0/authorize
          tokenUri: https://nid.naver.com/oauth2.0/token
          userInfoUri: https://openapi.naver.com/v1/nid/me
          userNameAttribute: response
        kakao:
          authorizationUri: https://kauth.kakao.com/oauth/authorize
          tokenUri: https://kauth.kakao.com/oauth/token
          userInfoUri: https://kapi.kakao.com/v2/user/me
          userNameAttribute: id

  mail :
    host : smtp.gmail.com
    port : 587
    username : 'sky6min@gmail.com'
    password : 'qtqmxmcjchrrmdpy'
    properties :
      mail :
        smtp :
          auth : true
          starttls :
            enable : true
  redis:
    host: 13.125.56.138
    port: 8975
  # for SPA
  resources:
    static-locations: classpath:/dist/
    add-mappings: 'false'
  mvc:
    throw-exception-if-no-handler-found: 'true'
  #database
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      username: backuser
      password: 1q2w3e4r!
    url: jdbc:mysql://13.125.56.138:8976/cctv?serverTimezone=Asia/Seoul
  jpa:
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    open-in-view: false
    show-sql: true   # sql 쿼리문 볼수있음.
    properties:
      hibernate:
        format_sql: true # sql 쿼리문을 정제해서 볼수있음.
    hibernate:
      ddl-auto: update
      format_sql: true
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  data:
    web:
      pageable:
        one-indexed-parameters: 'true'
  devtools:
    livereload:
      enabled: 'true'

# jwt
# unit is ms. 15 * 24 * 60 * 60 * 1000 = 15days
jwt:
  secret: MDUsNz9lRE8pSikrKX1HN2wvK2wlVD47Yzw=OV94LVpkTGdfXU9nNV05ZHs=QDtLdE12O1hcanZsSXpueVU4QG8oUiFCP1gwQiFQ
  expiration: '1296000000'
#logging
logging:
  level:
    org:
      sringframework:
        boot: DEBUG
        security: DEBUG
      springframework:
        web: DEBUG
      apache:
        tiles: INFO
    com:
      samsung:
        security: DEBUG
    root: INFO
  file:
    name: ./ssafy-web.log

#for health check
management:
  health:
    diskspace:
      enabled: 'true'
    default:
      enabled: 'true'
    db:
      enabled: 'true'
  servlet:
    context-path: /manage
